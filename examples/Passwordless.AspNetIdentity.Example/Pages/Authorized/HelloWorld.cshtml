@page
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Options
@using Passwordless.AspNetCore
@model HelloWorldModel
@inject IOptions<PasswordlessAspNetCoreOptions> PasswordlessOptions;

@{
    ViewData["Title"] = "Hello World";
}
<h1>@ViewData["Title"]</h1>

@if (HttpContext.User.Identity!.IsAuthenticated)
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-success" role="alert">
                <strong>Congratulations!</strong> You are now authenticated!
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="mb-3">
                <label asp-for="AuthenticatedUser!.Email" class="form-label">Email</label>
                <input disabled="disabled" type="text" asp-for="AuthenticatedUser!.Email" class="form-control">
            </div>
            <div class="mb-3">
                <label asp-for="AuthenticatedUser!.Username" class="form-label">Username</label>
                <input disabled="disabled" type="text" asp-for="AuthenticatedUser!.Username" class="form-control">
            </div>
        </div>
    </div>
    <form class="row my-2" action="" method="POST">
        <div class="col-12">
            <h3>Set new passkey</h3>
            <div class="mb-3">
                <label asp-for="Nickname">Nickname (Optional): </label>
                <input type="text" asp-for="Nickname" class="form-control" />
            </div>
            
            <button type="submit" class="btn-primary">Add Passkey</button>
        </div>
    </form>
    <div>
        <h3>Current Claims:</h3>
        <ul>
            @foreach (var claim in Model.Claims)
            {
                <li>@claim.ClaimName : @claim.ClaimValue</li>
            }
        </ul>
    </div>
    
    <a asp-page="ElevatedAuthentication">To Elevated Area</a>
    
    <a asp-page="SecondContext">To Other Area</a>
    
    @if (Model.CanAddPassKeys)
    {
        <script src="https://cdn.passwordless.dev/dist/1.1.0/umd/passwordless.umd.js"></script>
        <script>
            const p = new Passwordless.Client({
               apiKey: "@PasswordlessOptions.Value.ApiKey",
               apiUrl: "@PasswordlessOptions.Value.ApiUrl"
           });
            async function addPasskey() {
                const addCredentialResponse = await fetch('/passwordless-add-credential', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ displayName: '@Model.Nickname' })
                });

                // if no error then deserialize and use returned token to create now our passkeys
                if (addCredentialResponse.ok) {
                    const registrationResponseJson = await addCredentialResponse.json();
                    const token = registrationResponseJson.token;

                    await p.register(token, '@Model.Nickname');
                }
            }
            addPasskey();
        </script>
    }
}
else
{
    <div class="row">
        <div class="col-12">
            <p class="text-danger">Not logged in.</p>
        </div>
    </div>
}